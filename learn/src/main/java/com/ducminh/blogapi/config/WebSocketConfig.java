package com.ducminh.blogapi.config;

import com.ducminh.blogapi.repository.jpa.UserRepository;
import com.ducminh.blogapi.service.JwtService;
import jakarta.servlet.http.HttpSession;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.http.server.ServletServerHttpRequest;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.simp.config.ChannelRegistration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.messaging.simp.stomp.StompCommand;
import org.springframework.messaging.simp.stomp.StompHeaderAccessor;
import org.springframework.messaging.support.ChannelInterceptor;
import org.springframework.messaging.support.MessageHeaderAccessor;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;
import org.springframework.web.socket.server.HandshakeInterceptor;

import java.security.Principal;
import java.util.List;
import java.util.Map;

@Configuration
@Order(Ordered.HIGHEST_PRECEDENCE + 99)
@EnableWebSocketMessageBroker
@Slf4j
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Autowired
    private JwtService jwtService;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserDetailsService userDetailsService;

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws")
                .setAllowedOriginPatterns("*")//
                .withSockJS();
//                .setInterceptors(handshakeInterceptor());

    }


    @Override
    public void configureMessageBroker(MessageBrokerRegistry registry) {
        registry.enableSimpleBroker("/topic", "/queue");
//                .setTaskScheduler(heartBeatScheduler());
        registry.setApplicationDestinationPrefixes("/app");
        registry.setUserDestinationPrefix("/user");
    }

    @Bean
    public TaskScheduler heartBeatScheduler() {
        return new ThreadPoolTaskScheduler();
    }

    @Bean
    public HandshakeInterceptor handshakeInterceptor() {
        return new HandshakeInterceptor() {
            @Override
            public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map<String, Object> attributes) {
                if (request instanceof ServletServerHttpRequest) {
                    ServletServerHttpRequest servletRequest = (ServletServerHttpRequest) request;
                    String token = servletRequest.getServletRequest().getHeader("Authorization");

                    if (token != null && token.startsWith("Bearer ")) {
                        token = token.substring(7); // C·∫Øt "Bearer "
                        String username = jwtService.extractUsername(token);
                        List<SimpleGrantedAuthority> authorities = jwtService.extractAuthority(token);

                        if (username != null) {
                            attributes.put("USER", username); // L∆∞u v√†o session WebSocket
                            return true; // Cho ph√©p k·∫øt n·ªëi
                        }
                    }
                }
                return false; // Ch·∫∑n k·∫øt n·ªëi n·∫øu kh√¥ng c√≥ token h·ª£p l·ªá
            }

            @Override
            public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception) {
            }
        };
    }


    @Override
    public void configureClientInboundChannel(ChannelRegistration registration) {
        registration.interceptors(new ChannelInterceptor() {
            @Override
            public Message<?> preSend(Message<?> message, MessageChannel channel) {
                StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);

                if (StompCommand.CONNECT.equals(accessor.getCommand())) {
                    String token = accessor.getFirstNativeHeader("Authorization");
                    if (token != null && token.startsWith("Bearer")) {
                        token = token.substring(7);
                        String username = jwtService.extractUsername(token);
                        List<SimpleGrantedAuthority> grantedAuthorities = jwtService.extractAuthority(token);
                        UserDetails userDetails = userDetailsService.loadUserByUsername(username);
                        String userId = userRepository.findByUsername(username).get().getId();
                        Principal authenticationToken = new StompPrincipal(userId);
                        log.info("Principal: {}", authenticationToken.toString());
                        accessor.setUser(authenticationToken);
                        log.info("Accessor: {}", accessor.getUser().getName());
                    }
                }
                log.info("WebSocket preSend triggered for command: {}", accessor.getCommand());

                return message;
            }
        });
    }

}


//
//        üöÄ B∆∞·ªõc 1: X√°c ƒë·ªãnh v·∫•n ƒë·ªÅ
//        WebSocket kh√¥ng h·ªó tr·ª£ header HTTP trong handshake ban ƒë·∫ßu.
//        N·∫øu kh√¥ng d√πng session-based authentication (cookies), ta ph·∫£i t√¨m c√°ch g·ª≠i token khi client k·∫øt n·ªëi.
//        STOMP c√≥ h·ªó tr·ª£ header trong CONNECT request, v·∫≠y c√≥ th·ªÉ truy·ªÅn token qua ƒë√¢y.
//        üöÄ B∆∞·ªõc 2: Ch·ªçn v·ªã tr√≠ x·ª≠ l√Ω token
//        V√¨ token n·∫±m trong header STOMP, ta c·∫ßn ch·∫∑n CONNECT request ƒë·ªÉ x√°c th·ª±c tr∆∞·ªõc khi cho ph√©p WebSocket k·∫øt n·ªëi.
//        Interceptor (ChannelInterceptor) l√† n∆°i ph√π h·ª£p ƒë·ªÉ l√†m vi·ªác n√†y.
//        üöÄ B∆∞·ªõc 3: Vi·∫øt √Ω t∆∞·ªüng b·∫±ng ng√¥n ng·ªØ t·ª± nhi√™n
//        M√¨nh c·∫ßn l√†m g√¨ trong preSend?
//
//        ‚úî L·∫•y tin nh·∫Øn STOMP (CONNECT request)
//        ‚úî L·∫•y token t·ª´ header "Authorization"
//        ‚úî X√°c th·ª±c token b·∫±ng JwtTokenProvider
//        ‚úî N·∫øu h·ª£p l·ªá ‚Üí G√°n Authentication v√†o session
//        ‚úî N·∫øu kh√¥ng h·ª£p l·ªá ‚Üí Ch·∫∑n k·∫øt n·ªëi
//
//        üí° Khi ƒë√£ c√≥ t∆∞ duy n√†y, vi·ªác vi·∫øt code ch·ªâ c√≤n l√† d·ªãch √Ω t∆∞·ªüng sang Java!
// **** jwtfilter se chay truoc o moi http =>> resend se chay khi co yeu cau connect, tuc la van cahay sau jwtFilter
